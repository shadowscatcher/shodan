package search

import (
	"fmt"
	"github.com/denisgubin/shodan/search/exploit_types"
)

type ExploitsQuery struct {
	// For manual search
	Text string

	// The author of the exploit/vulnerability.
	Author string `shodan_search:"author"`

	// The Bugtraq ID for the exploit.
	BID string `shodan_search:"bid"`

	// The actual code of the exploit.
	Code string `shodan_search:"code"`

	// The Common Vulnerability and Exposures ID for the exploit.
	CVE string `shodan_search:"cve"`

	// When the exploit was released.
	Date string `shodan_search:"date"`

	// The description of the exploit, how it works and where it applies.
	Description string `shodan_search:"description"`

	// The Microsoft Security Bulletin ID for the exploit.
	MSB string `shodan_search:"msb"`

	// The Open Source Vulnerability Database ID for the exploit.
	OSVDB string `shodan_search:"osvdb"`

	// The operating system that the exploit targets.
	Platform string `shodan_search:"platform"`

	// The port number for the affected service if the exploit is remote.
	Port int `shodan_search:"port"`

	// The title or short description for the exploit if available.
	Title string `shodan_search:"title"`

	// The category of exploit.
	Type exploit_types.ExploitType `shodan_search:"type"`
}

func (q *ExploitsQuery) String() string {
	marshaled := marshalQueryParam(q, true, "")
	switch {
	case marshaled == "":
		return q.Text
	case q.Text == "":
		return marshaled
	}

	return fmt.Sprintf("%q %q", q.Text, marshaled)
}
